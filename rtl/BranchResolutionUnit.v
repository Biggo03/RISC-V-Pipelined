`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 09/02/2024 04:32:00 PM
// Design Name: 
// Module Name: branchdecoder
// Project Name: riscvsingle
// Target Devices: 
// Tool Versions: 
// Description: Determines if a branch is to occur. This is based on funct3, flags N, Z, C, and V, and BranchOp
//              BranchOp is an intermediary control signal generated by the main decoder.
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module BranchResolutionUnit(input [2:0] funct3,
                            input [1:0] BranchOp,
                            input N, Z, C, V,
                            output PCSrcRes);

    reg TempPCSrcRes;

    
    //Branch signal computation
    always @(*) begin
        
        case(BranchOp)
            
            2'b00: TempPCSrcRes = 1'b0; //Non-branching instructions
            2'b01: TempPCSrcRes = 1'b1; //Jumping instructions
            
            //B-type instructions
            2'b11: begin
                
                //Type of branch dependant on funct3
                case(funct3)
                    
                    3'b000: TempPCSrcRes = Z;      //beq
                    3'b001: TempPCSrcRes = ~Z;     //bne
                    3'b101: TempPCSrcRes = ~(N^V); //bge
                    3'b111: TempPCSrcRes = C;      //bgeu
                    3'b100: TempPCSrcRes = N^V;    //blt
                    3'b110: TempPCSrcRes = ~C;     //bltu
                    default: TempPCSrcRes = 1'bx;   //Unknown branch condition
                
                endcase
                
            end
            
            default: TempPCSrcRes = 1'bx; //Unknown BranchOp
            
        endcase
    
    end
    
    //Assignment of temp value to proper signal
    assign PCSrcRes = TempPCSrcRes;
    

endmodule
