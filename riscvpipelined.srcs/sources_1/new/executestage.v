`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Author: Viggo Wozniak
//
// Create Date: 10/01/2024 06:53:44 PM
// Module Name: executestage
// Project Name: riscvpipelined
// Description: All logic contained within the Execute pipeline stage.
// 
// Dependencies: branchdecoder (branchdecoder.v), mux3 (mux3.v), mux2 (mux2.v), ALU (ALU.v), adder (adder.v)
// Additional Comments: This is intended to interface with inputs coming from the Execute stages pipeline register
//                      and outputs being linked to the Memory stages pipeline register
//                      
//
//////////////////////////////////////////////////////////////////////////////////


module Estage(input [31:0] RD1E, RD2E,
                    input [31:0] ResultW, ALUResultM,
                    input [31:0] PCE,
                    input [31:0] ImmExtE,
                    input [2:0] funct3E,
                    input [1:0] BranchOpE,
                    input [1:0] ForwardAE, ForwardBE,
                    input [3:0] ALUControlE,
                    input PCBaseSrcE, ALUSrcE,
                    output [31:0] ALUResultE, WriteDataE,
                    output [31:0] PCTargetE,
                    output PCSrcE);
                    
    //Flags generated by ALU
    wire N, Z, C, V;
    
    //Inputs for ALU
    wire [31:0] SrcAE, SrcBE;
    
    branchdecoder BranchLogic(.funct3 (funct3E),
                              .BranchOp (BranchOpE),
                              .N (N),
                              .Z (Z),
                              .C (C),
                              .V (V),
                              .PCSrc (PCSrcE)
                              );
   
    //Stage multiplexers:
    mux3 ForwardMuxA(.d0 (RD1E),
                     .d1 (ResultW),
                     .d2 (ALUResultM),
                     .s (ForwardAE),
                     .y (SrcA));
    
    mux3 ForwardMuxB(.d0 (RD2E),
                     .d1 (ResultW),
                     .d2 (ALUResultM),
                     .y (WriteDataE));
    
    mux2 SrcBMux(.d0 (WriteDataE),
                 .d1 (ImmExtE),
                 .s (ALUSrcE),
                 .y (SrcB));
    
    mux2 PCTargetMux(.d0 (PCE),
                     .d1 (SrcAE),
                     .s (PCBaseSrcE),
                     .y (PCBaseE));
    
    //Arithmetic units:
    ALU ALU(.ALUControl (ALUControlE),
            .A (SrcAE),
            .B (SrcBE),
            .ALUResult (ALUResultE),
            .N (N),
            .Z (Z),
            .C (C),
            .V (V));
            
    adder PCTargetAdder(.a (PCBaseE),
                        .b (ImmExtE),
                        .y (PCTargetE)); 

endmodule
